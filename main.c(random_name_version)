#include "utils.h"

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <TlHelp32.h>
#include <Windows.h>

void generate_random_filename(char* filename, size_t length) {
    const char charset[] = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    for (size_t i = 0; i < length - 1; i++) {
        int key = rand() % (sizeof(charset) - 1);
        filename[i] = charset[key];
    }
    filename[length - 1] = '\0';
}

int main(int argc, char* argv[]) {
    if (argc > 1) {
        // This is the new process, delete the original executable
        if (!DeleteFile(argv[1])) {
            fprintf(stderr, "Failed to delete original file %s. Error: %lu\n", argv[1], GetLastError());
            return 1;
        }
    }
    else {
        // Seed the random number generator
        srand((unsigned int)time(NULL));

        // Generate a random filename for the new executable
        char new_filename[MAX_PATH];
        generate_random_filename(new_filename, 10);
        strcat_s(new_filename, sizeof(new_filename), ".exe");

        // Get the current executable's directory
        char current_filename[MAX_PATH];
        if (GetModuleFileName(NULL, current_filename, MAX_PATH) == 0) {
            fprintf(stderr, "Failed to get current executable filename. Error: %lu\n", GetLastError());
            return 1;
        }

        char new_filepath[MAX_PATH];
        strcpy_s(new_filepath, sizeof(new_filepath), current_filename);
        char* last_backslash = strrchr(new_filepath, '\\');
        if (last_backslash != NULL) {
            *(last_backslash + 1) = '\0'; // Keep the path, remove the filename
        }
        strcat_s(new_filepath, sizeof(new_filepath), new_filename);

        // Copy the current executable to the new filename
        if (!CopyFile(current_filename, new_filepath, FALSE)) {
            fprintf(stderr, "Failed to copy file to %s. Error: %lu\n", new_filepath, GetLastError());
            return 1;
        }

        // Start the new executable
        STARTUPINFO si = { sizeof(si) };
        PROCESS_INFORMATION pi;
        char command_line[MAX_PATH + 50];
        sprintf_s(command_line, sizeof(command_line), "\"%s\" \"%s\"", new_filepath, current_filename);
        if (!CreateProcess(new_filepath, command_line, NULL, NULL, FALSE, 0, NULL, NULL, &si, &pi)) {
            fprintf(stderr, "Failed to start new process. Error: %lu\n", GetLastError());
            return 1;
        }

        // Wait for the new process to start
        WaitForInputIdle(pi.hProcess, INFINITE);

        // Close handles to the new process
        CloseHandle(pi.hProcess);
        CloseHandle(pi.hThread);

        // Exit the original process
        ExitProcess(0);
    }

    // The following code will be executed in the new process
    // Parameter fixed value
    const DWORD player_base_offset = 0x726BD8;
    const DWORD m_flags_offset = 0xF0;
    printf("Preset base address parameters:\r\n  PlayerBase offset = %lX\r\n  mFlags offset = %lX\r\n  Windows title = Left 4 Dead 2 - Direct3D 9\r\n  ",
        player_base_offset, m_flags_offset);

    puts("Launch the game from Steam.");

    // Keep looping until we find the l4d2 window.
    HWND l4d2_hwnd = NULL;
    while ((l4d2_hwnd = FindWindow(NULL, TEXT("Left 4 Dead 2 - Direct3D 9"))) == NULL) {
        Sleep(1000);
    }

    puts("Game found!");

    // Get the process id from the window.
    DWORD l4d2_process_id = 0;
    GetWindowThreadProcessId(l4d2_hwnd, &l4d2_process_id);

    // Get a handle to the process with virtual memory read permissions.
    HANDLE l4d2_process = OpenProcess(PROCESS_VM_READ, FALSE, l4d2_process_id);
    if (l4d2_process == NULL || l4d2_process_id == 0) {
        error("Could not open process or get process id!");
    }

    // Loop until we get the client.dll base address
    DWORD client_base_address = 0;
    while (client_base_address == 0) {
        // Get a handle for looping through loaded modules in the process.
        HANDLE hSnapshot = CreateToolhelp32Snapshot(
            TH32CS_SNAPMODULE | TH32CS_SNAPMODULE32, l4d2_process_id);
        if (hSnapshot == NULL) {
            error("Could not create snapshot!");
        }

        // Get the client.dll base address.
        client_base_address = get_client_dll_base_address(hSnapshot);
        CloseHandle(hSnapshot);

        if (client_base_address == 0) {
            puts("Game loading...");
            Sleep(3000);
        }
    }

    puts("Autobhop is now functional!");

    // Hide the console
    Sleep(5000);
    HWND console_window = GetConsoleWindow();
    ShowWindow(console_window, SW_HIDE);

    // Bhop loop
    DWORD player_base_pointer = 0;
    DWORD m_flags = 0;
    while (TRUE) {
        // Check if the window exists
        if (!IsWindow(l4d2_hwnd)) {
            // Exit the program
            ExitProcess(0);
        }

        // Check if the spacebar is pressed.
        if (GetAsyncKeyState(' ') & 0x8000) {
            // Read the player base pointer
            ReadProcessMemory(
                l4d2_process, (char*)client_base_address + player_base_offset,
                &player_base_pointer, sizeof(player_base_pointer), NULL);
            // Read the mFlags variable from l4d2
            ReadProcessMemory(l4d2_process,
                (char*)player_base_pointer + m_flags_offset, &m_flags,
                sizeof(m_flags), NULL);

            // Autobhop main program
            if (m_flags != 0x80 && m_flags != 0x82 && m_flags != 0x280 &&
                m_flags != 0x282) {
                SendMessage(l4d2_hwnd, WM_KEYDOWN, ' ', 0x390000);
            }
            else if (m_flags == 0x80 || m_flags == 0x82 || m_flags == 0x280 ||
                m_flags == 0x282) {
                SendMessage(l4d2_hwnd, WM_KEYUP, ' ', 0x390000);
            }
        }

        Sleep(0);
    }
}
